/**
 * Asistente de configuraci√≥n espec√≠fico para la instancia ccsoft.atlassian.net
 * Gu√≠a paso a paso para configurar credenciales correctamente
 */

class SetupWizard {
  
  constructor() {
    this.ui = SpreadsheetApp.getUi();
  }

  /**
   * Ejecuta el asistente de configuraci√≥n completo
   */
  ejecutarAsistente() {
    try {
      // Paso 1: Mostrar informaci√≥n inicial
      this._mostrarInformacionInicial();
      
      // Paso 2: Configurar email
      const email = this._configurarEmail();
      if (!email) return false;
      
      // Paso 3: Configurar API Token
      const apiToken = this._configurarAPIToken();
      if (!apiToken) return false;
      
      // Paso 4: Guardar configuraci√≥n
      this._guardarConfiguracion(email, apiToken);
      
      // Paso 5: Probar conexi√≥n
      return this._probarConexion();
      
    } catch (error) {
      Logger.log(`‚ùå Error en asistente: ${error.message}`);
      this.ui.alert('Error', `Error en configuraci√≥n: ${error.message}`, this.ui.ButtonSet.OK);
      return false;
    }
  }

  /**
   * Muestra la informaci√≥n inicial del asistente
   * @private
   */
  _mostrarInformacionInicial() {
    const mensaje = `üöÄ ASISTENTE DE CONFIGURACI√ìN JIRA\n\n` +
      `Te ayudar√© a configurar tu conexi√≥n con:\n` +
      `üè¢ Dominio: ccsoft.atlassian.net\n` +
      `üìÇ Proyecto: FENIX\n\n` +
      `Necesitar√°s:\n` +
      `üìß Tu email de Jira (computocontable@gmail.com)\n` +
      `üîë Un API Token (te ayudo a obtenerlo)\n\n` +
      `¬øContinuar?`;
    
    const response = this.ui.alert(
      'üéØ Configuraci√≥n Sistema Jira',
      mensaje,
      this.ui.ButtonSet.YES_NO
    );
    
    if (response !== this.ui.Button.YES) {
      throw new Error('Configuraci√≥n cancelada por el usuario');
    }
  }

  /**
   * Configura el email del usuario
   * @private
   * @returns {string|null} Email configurado o null si se cancela
   */
  _configurarEmail() {
    const mensaje = `üìß CONFIGURAR EMAIL DE JIRA\n\n` +
      `Por favor, confirma tu email de acceso a Jira:\n\n` +
      `(El sistema sugiere: computocontable@gmail.com)\n\n` +
      `Si es diferente, ingresa el correcto:`;
    
    const response = this.ui.prompt(
      'Paso 1: Email de Jira',
      mensaje,
      this.ui.ButtonSet.OK_CANCEL
    );
    
    if (response.getSelectedButton() !== this.ui.Button.OK) {
      return null;
    }
    
    let email = response.getResponseText().trim();
    if (!email) {
      email = 'computocontable@gmail.com'; // Valor por defecto
    }
    
    if (!this._validarEmail(email)) {
      this.ui.alert('Error', 'Email inv√°lido. Debe ser una direcci√≥n v√°lida.', this.ui.ButtonSet.OK);
      return this._configurarEmail(); // Reintentar
    }
    
    return email;
  }

  /**
   * Configura el API Token del usuario
   * @private
   * @returns {string|null} API Token o null si se cancela
   */
  _configurarAPIToken() {
    // Mostrar instrucciones para obtener el token
    const instrucciones = `üîë OBTENER API TOKEN\n\n` +
      `Pasos para obtener tu API Token:\n\n` +
      `1. Abre una nueva pesta√±a en tu navegador\n` +
      `2. Ve a: https://id.atlassian.com/manage-profile/security/api-tokens\n` +
      `3. Inicia sesi√≥n con tu cuenta de Jira\n` +
      `4. Haz clic en "Create API token"\n` +
      `5. Nombre: "Google Sheets Reportes"\n` +
      `6. Copia el token completo\n\n` +
      `‚ö†Ô∏è El token es LARGO (como 200 caracteres)\n` +
      `‚ö†Ô∏è Solo se muestra UNA VEZ, c√≥pialo completo\n\n` +
      `¬øYa tienes tu API Token listo?`;
    
    const readyResponse = this.ui.alert(
      'Paso 2: API Token',
      instrucciones,
      this.ui.ButtonSet.YES_NO
    );
    
    if (readyResponse !== this.ui.Button.YES) {
      return null;
    }
    
    // Solicitar el token
    const tokenPrompt = `üîë INGRESAR API TOKEN\n\n` +
      `Pega aqu√≠ tu API Token completo:\n\n` +
      `(Deber√≠a empezar con ATATT3xFfGF0...)\n` +
      `(Y ser muy largo, ~200 caracteres)`;
    
    const tokenResponse = this.ui.prompt(
      'Ingresar Token',
      tokenPrompt,
      this.ui.ButtonSet.OK_CANCEL
    );
    
    if (tokenResponse.getSelectedButton() !== this.ui.Button.OK) {
      return null;
    }
    
    const token = tokenResponse.getResponseText().trim();
    
    if (!token || token.length < 50) {
      this.ui.alert(
        'Token Muy Corto',
        `El token parece incompleto (${token.length} caracteres).\n\n` +
        `Un API Token v√°lido tiene ~200 caracteres.\n\n` +
        `¬øCopiaste el token completo?`,
        this.ui.ButtonSet.OK
      );
      return this._configurarAPIToken(); // Reintentar
    }
    
    if (!token.startsWith('ATATT')) {
      const continueResponse = this.ui.alert(
        'Token Inusual',
        `El token no empieza con "ATATT" como es normal.\n\n` +
        `Token ingresado: ${token.substring(0, 20)}...\n\n` +
        `¬øEst√°s seguro que es correcto?`,
        this.ui.ButtonSet.YES_NO
      );
      
      if (continueResponse !== this.ui.Button.YES) {
        return this._configurarAPIToken(); // Reintentar
      }
    }
    
    return token;
  }

  /**
   * Guarda la configuraci√≥n en el sistema
   * @private
   * @param {string} email - Email del usuario
   * @param {string} apiToken - API Token del usuario
   */
  _guardarConfiguracion(email, apiToken) {
    // Guardar en el sistema de credenciales
    if (typeof CredManager !== 'undefined') {
      CredManager.setEmail(email);
      CredManager.setApiToken(apiToken);
      CredManager.setProjectKey('FENIX');
    }
    
    // Actualizar configuraci√≥n global
    CONFIG_JIRA.email = email;
    CONFIG_JIRA.apiToken = apiToken;
    CONFIG_JIRA.projectKey = 'FENIX';
    
    Logger.log(`‚úÖ Configuraci√≥n guardada: ${email} / Token: ${apiToken.substring(0, 10)}...`);
  }

  /**
   * Prueba la conexi√≥n con Jira
   * @private
   * @returns {boolean} True si la conexi√≥n es exitosa
   */
  _probarConexion() {
    this.ui.alert(
      'Probando Conexi√≥n',
      'üîÑ Probando conexi√≥n con Jira...\n\nEsto puede tomar unos segundos.',
      this.ui.ButtonSet.OK
    );
    
    try {
      const jiraAPI = new JiraAPI();
      const colaboradores = jiraAPI.obtenerListaColaboradores();
      
      this.ui.alert(
        '‚úÖ Configuraci√≥n Exitosa',
        `¬°Conexi√≥n establecida correctamente!\n\n` +
        `üìß Email: ${CONFIG_JIRA.email}\n` +
        `üîë Token: Configurado\n` +
        `üìÇ Proyecto: ${CONFIG_JIRA.projectKey}\n` +
        `üë• Colaboradores encontrados: ${colaboradores.length}\n\n` +
        `¬°Ya puedes generar reportes!`,
        this.ui.ButtonSet.OK
      );
      
      return true;
      
    } catch (error) {
      Logger.log(`‚ùå Error probando conexi√≥n: ${error.message}`);
      
      this.ui.alert(
        '‚ùå Error de Conexi√≥n',
        `No se pudo conectar con Jira:\n\n` +
        `${error.message}\n\n` +
        `Revisa:\n` +
        `‚Ä¢ Email correcto\n` +
        `‚Ä¢ API Token completo\n` +
        `‚Ä¢ Conexi√≥n a internet\n\n` +
        `Usa "üîç Diagn√≥stico Completo" para m√°s detalles.`,
        this.ui.ButtonSet.OK
      );
      
      return false;
    }
  }

  /**
   * Valida formato de email
   * @private
   * @param {string} email - Email a validar
   * @returns {boolean} True si es v√°lido
   */
  _validarEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }
}

// Funci√≥n global para ejecutar el asistente
function ejecutarAsistenteConfiguracion() {
  const wizard = new SetupWizard();
  return wizard.ejecutarAsistente();
}
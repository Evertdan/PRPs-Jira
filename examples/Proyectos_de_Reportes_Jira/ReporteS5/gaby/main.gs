/**
 * ARCHIVO PRINCIPAL - SISTEMA DE REPORTES JIRA
 * ==========================================
 * 
 * Este es el punto de entrada principal del sistema modularizado de reportes de Jira.
 * 
 * M√≥dulos incluidos:
 * - config.gs: Configuraci√≥n del sistema
 * - error-handler.gs: Manejo de errores y logging
 * - jira-api.gs: Funciones de API de Jira
 * - ui-manager.gs: Manejo de interfaz de usuario
 * - report-generator.gs: Generaci√≥n de reportes
 * 
 * @author Sistema de Reportes Modularizado
 * @version 2.0
 */

// =====================================
// MEN√ö PRINCIPAL
// =====================================

/**
 * Se ejecuta cuando el usuario abre la hoja de c√°lculo.
 * Crea un men√∫ personalizado en la interfaz de Google Sheets.
 */
function onOpen() {
  try {
    // Intentar cargar credenciales almacenadas si el manejador est√° disponible
    try {
      if (typeof CredManager !== 'undefined' && CredManager.cargarCredenciales) {
        CredManager.cargarCredenciales();
      }
    } catch (credError) {
      Logger.log(`Advertencia cargando credenciales: ${credError.message}`);
    }
    
    const ui = SpreadsheetApp.getUi();
    ui.createMenu('üìä Indicadores')
      .addItem('üìã Tareas del Sprint', 'mostrarDialogo')
      .addSeparator()
      .addSubMenu(ui.createMenu('‚öôÔ∏è Configuraci√≥n')
        .addItem('üöÄ Asistente de Configuraci√≥n', 'ejecutarAsistenteConfiguracion')
        .addSeparator()
        .addItem('üìß Configurar Credenciales', 'configurarCredenciales')
        .addItem('üìã Seleccionar Proyecto', 'seleccionarProyecto')
        .addItem('üëÄ Ver Configuraci√≥n', 'mostrarConfiguracion')
        .addItem('üóëÔ∏è Limpiar Credenciales', 'limpiarCredenciales'))
      .addSubMenu(ui.createMenu('üß™ Testing')
        .addItem('üîó Test Conexi√≥n', 'testJiraConnection')
        .addItem('üîç Diagn√≥stico Completo', 'diagnosticoCompleto')
        .addSeparator()
        .addItem('‚ö° Prueba R√°pida', 'pruebaRapidaCredenciales')
        .addItem('üìã Estado Credenciales', 'mostrarEstadoCredenciales')
        .addItem('üîÑ Forzar Carga', 'forzarCargaCredenciales')
        .addSeparator()
        .addSubMenu(ui.createMenu('üêõ Debug Reportes')
          .addItem('üîç Debug Completo', 'debugReportGeneration')
          .addItem('üß™ Debug Sistema', 'debugCompleto')
          .addItem('üìã Verificar R√°pida', 'verificarRapida')
          .addItem('üìÑ Debug Tarea Individual', 'debugTareaIndividual')
          .addItem('üß™ Test Datos Simulados', 'testReporteConDatosSimulados')
          .addItem('üîÑ Reporte Backup', 'reporteCompromisosBackup'))
        .addItem('üìä Ver Logs', 'mostrarLogs'))
      .addToUi();
    
    // Intentar hacer log si la funci√≥n est√° disponible
    try {
      if (typeof logInfo !== 'undefined') {
        logInfo('Men√∫ inicializado correctamente');
      } else {
        Logger.log('Men√∫ inicializado correctamente');
      }
    } catch (logError) {
      Logger.log('Men√∫ inicializado correctamente');
    }
    
    // Verificar credenciales despu√©s de un peque√±o delay para asegurar que todo est√© cargado
    Utilities.sleep(500);
    
    try {
      if (typeof CredManager !== 'undefined' && CredManager.credencialesConfiguradas) {
        if (!CredManager.credencialesConfiguradas()) {
          Utilities.sleep(1000); // Esperar un poco m√°s para que se cargue la UI completa
          mostrarBienvenida();
        }
      }
    } catch (welcomeError) {
      Logger.log(`Advertencia mostrando bienvenida: ${welcomeError.message}`);
    }
    
  } catch (error) {
    Logger.log(`Error inicializando men√∫: ${error.message}`);
    // Crear men√∫ b√°sico en caso de error
    try {
      const ui = SpreadsheetApp.getUi();
      ui.createMenu('üìä Indicadores')
        .addItem('üìã Tareas del Sprint', 'mostrarDialogo')
        .addItem('‚öôÔ∏è Configurar Credenciales', 'configurarCredenciales')
        .addItem('üîç Diagn√≥stico', 'diagnosticoCompleto')
        .addToUi();
    } catch (fallbackError) {
      Logger.log(`Error creando men√∫ b√°sico: ${fallbackError.message}`);
    }
  }
}

/**
 * Muestra el mensaje de bienvenida para nuevos usuarios
 */
function mostrarBienvenida() {
  try {
    const ui = SpreadsheetApp.getUi();
    const response = ui.alert(
      'üëã Bienvenido al Sistema de Reportes Jira',
      '¬°Primera vez usando el sistema!\n\n' +
      'üöÄ RECOMENDADO: Usa el "Asistente de Configuraci√≥n"\n' +
      'Te gu√≠a paso a paso para configurar todo correctamente.\n\n' +
      'üìß Solo necesitas: tu email y API token de Jira\n' +
      'üè¢ Preconfigurado para: ccsoft.atlassian.net\n\n' +
      '¬øEjecutar el asistente ahora?',
      ui.ButtonSet.YES_NO
    );
    
    if (response === ui.Button.YES) {
      ejecutarAsistenteConfiguracion();
    }
  } catch (error) {
    Logger.log(`Error mostrando bienvenida: ${error.message}`);
  }
}

/**
 * Funci√≥n principal para mostrar el di√°logo de generaci√≥n de reportes
 * Utiliza el m√≥dulo UIManager para manejar la interfaz
 */
function mostrarDialogo() {
  try {
    // Verificar que los manejadores est√©n disponibles
    if (typeof ErrorManager === 'undefined') {
      Logger.log('ErrorManager no disponible, ejecutando directamente');
      ejecutarMostrarDialogo();
      return;
    }
    
    ErrorManager.executeWithErrorHandling(
      () => ejecutarMostrarDialogo(),
      'Mostrar di√°logo principal'
    );
  } catch (error) {
    Logger.log(`Error en mostrarDialogo: ${error.message}`);
    ejecutarMostrarDialogo();
  }
}

/**
 * L√≥gica principal para mostrar el di√°logo de reportes
 * @private
 */
function ejecutarMostrarDialogo() {
  try {
    // Cargar credenciales y verificar configuraci√≥n
    if (typeof CredManager !== 'undefined' && CredManager.cargarCredenciales) {
      CredManager.cargarCredenciales();
    }
    
    // Verificar si las credenciales est√°n configuradas
    const credencialesOK = (typeof CredManager !== 'undefined' && CredManager.credencialesConfiguradas) 
      ? CredManager.credencialesConfiguradas() 
      : (CONFIG_JIRA.email && CONFIG_JIRA.apiToken);
    
    if (!credencialesOK) {
      const ui = SpreadsheetApp.getUi();
      
      // Verificar qu√© credenciales faltan espec√≠ficamente
      let emailOK = false;
      let tokenOK = false;
      
      if (typeof CredManager !== 'undefined') {
        emailOK = CredManager.getEmail() !== '';
        tokenOK = CredManager.getApiToken() !== '';
      }
      
      let mensaje = '‚öôÔ∏è CREDENCIALES DE JIRA REQUERIDAS\n\n';
      
      if (!emailOK && !tokenOK) {
        mensaje += '‚ùå Email y API Token no configurados\n\n';
        mensaje += 'üöÄ RECOMENDADO: Usar "Asistente de Configuraci√≥n"\n';
        mensaje += 'Te gu√≠a paso a paso para configurar todo.\n\n';
        mensaje += '¬øEjecutar el asistente ahora?';
      } else if (!emailOK) {
        mensaje += '‚ùå Email no configurado\n';
        mensaje += `üîë Token: ‚úÖ Configurado\n\n`;
        mensaje += '¬øConfigurar email faltante?';
      } else if (!tokenOK) {
        mensaje += `üìß Email: ‚úÖ Configurado\n`;
        mensaje += '‚ùå API Token no configurado\n\n';
        mensaje += '¬øConfigurar token faltante?';
      }
      
      const response = ui.alert('Configuraci√≥n Incompleta', mensaje, ui.ButtonSet.YES_NO);
      
      if (response === ui.Button.YES) {
        // Usar asistente si no hay nada configurado, sino usar configurador simple
        if (!emailOK && !tokenOK) {
          if (ejecutarAsistenteConfiguracion()) {
            iniciarGeneracionReporte();
          }
        } else {
          if (configurarCredenciales()) {
            iniciarGeneracionReporte();
          }
        }
      }
      return;
    }
    
    // Verificar que tengamos un proyecto configurado
    if (!CONFIG_JIRA.projectKey) {
      const ui = SpreadsheetApp.getUi();
      const response = ui.alert(
        'üìÇ Proyecto Requerido',
        'Necesitas seleccionar un proyecto de Jira para obtener colaboradores.\n\n¬øDeseas seleccionar uno ahora?',
        ui.ButtonSet.YES_NO
      );
      
      if (response === ui.Button.YES) {
        seleccionarProyecto();
        // Despu√©s de seleccionar, proceder si ahora tenemos proyecto
        if (CONFIG_JIRA.projectKey) {
          iniciarGeneracionReporte();
        }
      }
      return;
    }
    
    // Todo configurado, mostrar di√°logo
    iniciarGeneracionReporte();
    
  } catch (error) {
    Logger.log(`Error ejecutando mostrar di√°logo: ${error.message}`);
    const ui = SpreadsheetApp.getUi();
    ui.alert('Error', `Error: ${error.message}\n\nIntenta usar "üîç Diagn√≥stico Completo" para identificar el problema.`, ui.ButtonSet.OK);
  }
}

/**
 * Inicia el proceso de generaci√≥n de reporte
 * @private
 */
function iniciarGeneracionReporte() {
  try {
    if (typeof UIManager !== 'undefined') {
      const uiManager = new UIManager();
      uiManager.mostrarDialogoPrincipal();
    } else {
      // Fallback si UIManager no est√° disponible
      const ui = SpreadsheetApp.getUi();
      ui.alert('Sistema no Listo', 'El sistema a√∫n se est√° cargando. Intenta nuevamente en unos momentos.', ui.ButtonSet.OK);
    }
  } catch (error) {
    Logger.log(`Error iniciando generaci√≥n de reporte: ${error.message}`);
    const ui = SpreadsheetApp.getUi();
    ui.alert('Error', `Error iniciando reporte: ${error.message}`, ui.ButtonSet.OK);
  }
}

// =====================================
// FUNCIONES DE UTILIDAD Y CONFIGURACI√ìN
// =====================================

/**
 * Muestra la configuraci√≥n del sistema
 */
function mostrarConfiguracion() {
  // Cargar credenciales actuales
  CredManager.cargarCredenciales();
  
  const ui = SpreadsheetApp.getUi();
  
  const email = CredManager.getEmail();
  const token = CredManager.getApiToken();
  const project = CredManager.getProjectKey();
  
  const mensaje = `üìã Configuraci√≥n Actual:\n\n` +
    `üè¢ Dominio: ${CONFIG_JIRA.dominio}\n` +
    `üìß Email: ${email || '‚ùå No configurado'}\n` +
    `üîë API Token: ${token ? `‚úÖ Configurado (${token.substring(0, 8)}...)` : '‚ùå No configurado'}\n` +
    `üìÇ Proyecto: ${project || '‚ùå No configurado'}\n\n` +
    `Estado: ${CredManager.credencialesConfiguradas() ? '‚úÖ Listo para usar' : '‚ùå Requiere configuraci√≥n'}\n\n` +
    `Para cambiar, usa el men√∫ "‚öôÔ∏è Configuraci√≥n"`;
  
  ui.alert('üëÄ Configuraci√≥n del Sistema', mensaje, ui.ButtonSet.OK);
}

/**
 * Muestra los logs del sistema
 */
function mostrarLogs() {
  const ui = SpreadsheetApp.getUi();
  ui.alert('üìä Logs', 'Los logs se encuentran en Ver > Registros de ejecuci√≥n', ui.ButtonSet.OK);
}

// =====================================
// FUNCIONES DE INTEGRACI√ìN
// =====================================

// Las funciones obtenerListaColaboradores, obtenerListaTareas y reporteCompromisos
// ahora est√°n implementadas en sus respectivos m√≥dulos y se mantienen como
// funciones globales para compatibilidad con el sistema existente.

// =====================================
// INFORMACI√ìN DEL SISTEMA
// =====================================

/**
 * Retorna informaci√≥n sobre la versi√≥n y m√≥dulos del sistema
 */
function getSystemInfo() {
  return {
    version: '2.0',
    modules: [
      'config.gs - Configuraci√≥n del sistema',
      'error-handler.gs - Manejo de errores y logging',
      'jira-api.gs - API de Jira',
      'ui-manager.gs - Interfaz de usuario', 
      'report-generator.gs - Generaci√≥n de reportes'
    ],
    author: 'Sistema Modularizado de Reportes Jira'
  };
}

// =====================================
// FUNCIONES DE TESTING
// =====================================

/**
 * Funci√≥n de testing para verificar conectividad con Jira
 */
function testJiraConnection() {
  try {
    // Cargar credenciales primero
    if (typeof CredManager !== 'undefined' && CredManager.cargarCredenciales) {
      CredManager.cargarCredenciales();
    }
    
    const ejecutarTest = () => {
      const jiraAPI = new JiraAPI();
      const colaboradores = jiraAPI.obtenerListaColaboradores();
      
      const ui = SpreadsheetApp.getUi();
      ui.alert(
        'Test de Conexi√≥n', 
        `‚úÖ Conexi√≥n exitosa!\n\nColaboradores encontrados: ${colaboradores.length}`,
        ui.ButtonSet.OK
      );
    };
    
    if (typeof ErrorManager !== 'undefined' && ErrorManager.executeWithErrorHandling) {
      ErrorManager.executeWithErrorHandling(ejecutarTest, 'Test de conexi√≥n Jira');
    } else {
      ejecutarTest();
    }
  } catch (error) {
    Logger.log(`Error en test de conexi√≥n: ${error.message}`);
    const ui = SpreadsheetApp.getUi();
    ui.alert('Error en Test', `Error: ${error.message}`, ui.ButtonSet.OK);
  }
}

/**
 * Funci√≥n de diagn√≥stico detallado para identificar problemas de configuraci√≥n
 */
function diagnosticoCompleto() {
  const ui = SpreadsheetApp.getUi();
  
  try {
    Logger.log("üîç Iniciando diagn√≥stico completo...");
    
    // 1. Verificar configuraci√≥n b√°sica
    const configIssues = [];
    
    if (!CONFIG_JIRA.dominio || CONFIG_JIRA.dominio === 'tu-dominio.atlassian.net') {
      configIssues.push('‚ùå Dominio no configurado');
    } else {
      Logger.log(`‚úÖ Dominio configurado: ${CONFIG_JIRA.dominio}`);
    }
    
    if (!CONFIG_JIRA.email || CONFIG_JIRA.email === 'tu-email@empresa.com') {
      configIssues.push('‚ùå Email no configurado');
    } else {
      Logger.log(`‚úÖ Email configurado: ${CONFIG_JIRA.email}`);
    }
    
    if (!CONFIG_JIRA.apiToken || CONFIG_JIRA.apiToken === 'tu-api-token-aqui') {
      configIssues.push('‚ùå API Token no configurado');
    } else {
      Logger.log(`‚úÖ API Token configurado (${CONFIG_JIRA.apiToken.substring(0, 8)}...)`);
    }
    
    if (configIssues.length > 0) {
      ui.alert(
        'Diagn√≥stico - Configuraci√≥n',
        `Problemas de configuraci√≥n encontrados:\n\n${configIssues.join('\n')}\n\nEdita config.gs para corregir.`,
        ui.ButtonSet.OK
      );
      return;
    }
    
    // 2. Test de autenticaci√≥n b√°sica
    Logger.log("üîê Probando autenticaci√≥n b√°sica...");
    const jiraAPI = new JiraAPI();
    const testUrl = `https://${CONFIG_JIRA.dominio}/rest/api/3/myself`;
    
    const response = UrlFetchApp.fetch(testUrl, {
      method: "GET",
      headers: {
        "Authorization": jiraAPI.auth,
        "Accept": "application/json"
      },
      muteHttpExceptions: true
    });
    
    const statusCode = response.getResponseCode();
    const responseText = response.getContentText();
    
    Logger.log(`üì° Respuesta de autenticaci√≥n: ${statusCode}`);
    Logger.log(`üìÑ Contenido: ${responseText.substring(0, 200)}...`);
    
    if (statusCode === 200) {
      const userData = JSON.parse(responseText);
      Logger.log(`‚úÖ Autenticaci√≥n exitosa para: ${userData.displayName}`);
      
      // 3. Probar obtener lista de proyectos accesibles
      const projectsUrl = `https://${CONFIG_JIRA.dominio}/rest/api/3/project`;
      const projectsResponse = UrlFetchApp.fetch(projectsUrl, {
        method: "GET",
        headers: {
          "Authorization": jiraAPI.auth,
          "Accept": "application/json"
        },
        muteHttpExceptions: true
      });
      
      if (projectsResponse.getResponseCode() === 200) {
        const projects = JSON.parse(projectsResponse.getContentText());
        const projectKeys = projects.map(p => p.key).slice(0, 10); // Primeros 10
        
        Logger.log(`üìã Proyectos accesibles: ${projectKeys.join(', ')}`);
        
        ui.alert(
          'Diagn√≥stico Completo',
          `‚úÖ Autenticaci√≥n exitosa!\n\n` +
          `Usuario: ${userData.displayName}\n` +
          `Proyectos accesibles (primeros 10): ${projectKeys.join(', ')}\n\n` +
          `Proyecto configurado: ${CONFIG_JIRA.projectKey}\n` +
          `${projectKeys.includes(CONFIG_JIRA.projectKey) ? '‚úÖ El proyecto configurado existe' : '‚ùå El proyecto configurado NO se encuentra en tu lista'}`,
          ui.ButtonSet.OK
        );
      } else {
        ui.alert(
          'Diagn√≥stico',
          `‚úÖ Autenticaci√≥n exitosa, pero no se pudieron obtener proyectos.\n\nC√≥digo: ${projectsResponse.getResponseCode()}`,
          ui.ButtonSet.OK
        );
      }
      
    } else {
      ui.alert(
        'Diagn√≥stico - Error de Autenticaci√≥n',
        `‚ùå Fallo de autenticaci√≥n (${statusCode})\n\nRevisa tu email y API token en config.gs\n\nDetalle: ${responseText.substring(0, 200)}`,
        ui.ButtonSet.OK
      );
    }
    
  } catch (error) {
    Logger.log(`‚ùå Error en diagn√≥stico: ${error.message}`);
    ui.alert(
      'Error en Diagn√≥stico',
      `Error: ${error.message}`,
      ui.ButtonSet.OK
    );
  }
}

/**
 * Funci√≥n de testing para verificar configuraci√≥n
 */
function testConfiguration() {
  const issues = [];
  
  if (!CONFIG_JIRA.dominio || CONFIG_JIRA.dominio === 'tu-dominio.atlassian.net') {
    issues.push('‚ö†Ô∏è Dominio de Jira no configurado');
  }
  
  if (!CONFIG_JIRA.email || CONFIG_JIRA.email === 'tu-email@empresa.com') {
    issues.push('‚ö†Ô∏è Email no configurado');
  }
  
  if (!CONFIG_JIRA.apiToken || CONFIG_JIRA.apiToken === 'tu-api-token-aqui') {
    issues.push('‚ö†Ô∏è API Token no configurado');
  }
  
  const ui = SpreadsheetApp.getUi();
  
  if (issues.length === 0) {
    ui.alert('Test de Configuraci√≥n', '‚úÖ Configuraci√≥n correcta!', ui.ButtonSet.OK);
  } else {
    ui.alert(
      'Test de Configuraci√≥n', 
      `‚ùå Problemas encontrados:\n\n${issues.join('\n')}\n\nEdita el archivo config.gs para corregir.`,
      ui.ButtonSet.OK
    );
  }
}
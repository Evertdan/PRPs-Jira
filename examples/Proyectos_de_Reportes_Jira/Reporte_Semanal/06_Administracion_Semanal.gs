// =====================================
// ARCHIVO 6: FUNCIONES DE ADMINISTRACI√ìN AVANZADA PARA REPORTES SEMANALES
// =====================================

/**
 * ‚úÖ Funci√≥n para limpiar cach√© expirado desde el men√∫
 */
function limpiarCacheExpiradoSemanal() {
  const ui = SpreadsheetApp.getUi();
  
  try {
    Logger.log('üßπ [SEMANAL] Limpiando cach√© expirado...');
    
    CacheManagerSemanal.limpiarExpirados();
    const stats = CacheManagerSemanal.obtenerEstadisticas();
    
    ui.alert(
      'Limpieza de Cach√© Completada',
      `üßπ Cach√© expirado limpiado exitosamente.\n\n` +
      `üìä Estado actual:\n` +
      `‚Ä¢ Entradas v√°lidas: ${stats.entradasValidas}\n` +
      `‚Ä¢ Entradas expiradas: ${stats.entradasExpiradas}\n` +
      `‚Ä¢ Tama√±o: ${Math.round(stats.tama√±oAproximado / 1024)} KB\n` +
      `‚Ä¢ Sistema: ${stats.tipoSistema}`,
      ui.ButtonSet.OK
    );
    
    Logger.log('‚úÖ [SEMANAL] Cach√© limpiado exitosamente desde men√∫');
    
  } catch (error) {
    Logger.log(`‚ùå [SEMANAL] Error limpiando cach√©: ${error.message}`);
    ui.alert(
      'Error de Limpieza',
      `‚ùå No se pudo limpiar el cach√© expirado.\n\n${error.message}`,
      ui.ButtonSet.OK
    );
  }
}

/**
 * ‚úÖ Funci√≥n para limpiar todo el cach√© desde el men√∫
 */
function limpiarTodoElCacheSemanal() {
  const ui = SpreadsheetApp.getUi();
  
  const confirmacion = ui.alert(
    'Confirmar Limpieza Total',
    '‚ö†Ô∏è ¬øEst√°s seguro de que quieres limpiar TODO el cach√© del sistema semanal?\n\n' +
    'Esto eliminar√° todos los datos almacenados y los pr√≥ximos\n' +
    'reportes ser√°n m√°s lentos mientras se actualiza la informaci√≥n.',
    ui.ButtonSet.YES_NO
  );
  
  if (confirmacion === ui.Button.YES) {
    try {
      Logger.log('üóëÔ∏è [SEMANAL] Limpiando todo el cach√©...');
      
      CacheManagerSemanal.limpiarTodo();
      
      ui.alert(
        'Limpieza Total Completada',
        'üßπ Todo el cach√© del sistema semanal ha sido limpiado.\n\n' +
        '‚ö° Los pr√≥ximos reportes tomar√°n m√°s tiempo mientras\n' +
        'se actualiza la informaci√≥n desde Jira.\n\n' +
        '‚ú® El sistema funcionar√° normalmente.',
        ui.ButtonSet.OK
      );
      
      Logger.log('‚úÖ [SEMANAL] Todo el cach√© limpiado exitosamente');
      
    } catch (error) {
      Logger.log(`‚ùå [SEMANAL] Error limpiando todo el cach√©: ${error.message}`);
      ui.alert(
        'Error de Limpieza',
        `‚ùå No se pudo limpiar el cach√© completo.\n\n${error.message}`,
        ui.ButtonSet.OK
      );
    }
  }
}

/**
 * ‚úÖ Funci√≥n para mostrar errores cr√≠ticos al usuario
 */
function mostrarErroresCriticosSemanal() {
  const ui = SpreadsheetApp.getUi();
  
  try {
    Logger.log('üö® [SEMANAL] Mostrando errores cr√≠ticos...');
    
    const errores = ErrorManagerSemanal.obtenerErroresCriticos();
    
    if (errores.length === 0) {
      ui.alert(
        'Sin Errores Cr√≠ticos',
        '‚úÖ ¬°Excelente! No hay errores cr√≠ticos registrados.\n\n' +
        'üéâ El sistema de reportes semanales est√° funcionando correctamente.\n\n' +
        'üìä Contin√∫a generando reportes con confianza.',
        ui.ButtonSet.OK
      );
      return;
    }
    
    let mensaje = `üö® ERRORES CR√çTICOS ENCONTRADOS: ${errores.length}\n\n`;
    
    // Mostrar los √∫ltimos 3 errores
    errores.slice(-3).forEach((error, index) => {
      const fecha = new Date(error.timestamp).toLocaleString();
      mensaje += `${errores.length - 2 + index}. ${error.mensaje}\n`;
      mensaje += `   üìÖ Fecha: ${fecha}\n`;
      mensaje += `   üÜî ID: ${error.id}\n`;
      mensaje += `   üìç Contexto: ${error.contexto}\n\n`;
    });
    
    if (errores.length > 3) {
      mensaje += `... y ${errores.length - 3} errores m√°s.\n\n`;
    }
    
    mensaje += 'üí° RECOMENDACIONES:\n';
    mensaje += '‚Ä¢ Revisa los logs detallados en "Ver > Registros de ejecuci√≥n"\n';
    mensaje += '‚Ä¢ Verifica tu conexi√≥n con Jira\n';
    mensaje += '‚Ä¢ Considera limpiar el cach√© si hay errores repetidos\n';
    mensaje += '‚Ä¢ Usa "üß™ Ejecutar Diagn√≥stico Completo" para m√°s informaci√≥n';
    
    ui.alert('Errores Cr√≠ticos del Sistema', mensaje, ui.ButtonSet.OK);
    
  } catch (error) {
    Logger.log(`‚ùå [SEMANAL] Error obteniendo errores cr√≠ticos: ${error.message}`);
    ui.alert(
      'Error',
      `‚ùå No se pudieron obtener los errores cr√≠ticos.\n\n${error.message}`,
      ui.ButtonSet.OK
    );
  }
}

/**
 * ‚úÖ Funci√≥n para limpiar errores cr√≠ticos desde el men√∫
 */
function limpiarErroresCriticosSemanal() {
  const ui = SpreadsheetApp.getUi();
  
  const confirmacion = ui.alert(
    'Confirmar Limpieza de Errores',
    '‚ö†Ô∏è ¬øEst√°s seguro de que quieres limpiar todos los errores cr√≠ticos?\n\n' +
    'Esta acci√≥n eliminar√° el historial de errores y no se puede deshacer.\n' +
    'Es √∫til para empezar con un registro limpio.',
    ui.ButtonSet.YES_NO
  );
  
  if (confirmacion === ui.Button.YES) {
    try {
      Logger.log('üßπ [SEMANAL] Limpiando errores cr√≠ticos...');
      
      ErrorManagerSemanal.limpiarErroresCriticos();
      
      ui.alert(
        'Errores Limpiados',
        'üßπ Todos los errores cr√≠ticos han sido limpiados exitosamente.\n\n' +
        '‚ú® El sistema comenzar√° con un registro de errores limpio.\n' +
        'üìä Los nuevos errores (si ocurren) se registrar√°n normalmente.',
        ui.ButtonSet.OK
      );
      
      Logger.log('‚úÖ [SEMANAL] Errores cr√≠ticos limpiados exitosamente');
      
    } catch (error) {
      Logger.log(`‚ùå [SEMANAL] Error limpiando errores cr√≠ticos: ${error.message}`);
      ui.alert(
        'Error de Limpieza',
        `‚ùå No se pudieron limpiar los errores cr√≠ticos.\n\n${error.message}`,
        ui.ButtonSet.OK
      );
    }
  }
}

/**
 * ‚úÖ Crea backup completo de la configuraci√≥n del sistema semanal
 */
function crearBackupConfiguracionSemanal() {
  const ui = SpreadsheetApp.getUi();
  
  try {
    Logger.log('üíæ [SEMANAL] Creando backup de configuraci√≥n...');
    
    const propiedades = PropertiesService.getScriptProperties();
    const todasLasPropiedades = propiedades.getProperties();
    
    // ‚úÖ Filtrar solo propiedades del sistema semanal
    const propiedadesSemanales = {};
    Object.keys(todasLasPropiedades).forEach(clave => {
      if (clave.includes('SEMANAL') || clave.includes('JIRA_')) {
        propiedadesSemanales[clave] = todasLasPropiedades[clave];
      }
    });
    
    const backup = {
      timestamp: new Date().toISOString(),
      version: SCRIPT_METADATA.version,
      sistema: 'Reportes_Semanales',
      properties: propiedadesSemanales,
      configuracion: {
        etiquetasSemana: CONFIG_SEMANAL.etiquetasSemana,
        colores: CONFIG_SEMANAL.colores,
        estadosCompletados: CONFIG_SEMANAL.estadosCompletados,
        estadosEnProgreso: CONFIG_SEMANAL.estadosEnProgreso,
        estadosPendientes: CONFIG_SEMANAL.estadosPendientes
      },
      triggers: ScriptApp.getProjectTriggers()
        .filter(t => t.getHandlerFunction() === 'ejecutarReporteAutomaticoSemanal')
        .map(t => ({
          tipo: t.getEventType().toString(),
          funcion: t.getHandlerFunction()
        }))
    };
    
    // ‚úÖ Guardar backup con timestamp √∫nico
    const backupKey = `BACKUP_SEMANAL_${Date.now()}`;
    propiedades.setProperty(backupKey, JSON.stringify(backup));
    
    ui.alert(
      'Backup Creado Exitosamente',
      `üíæ Backup de configuraci√≥n creado exitosamente!\n\n` +
      `üîë Clave: ${backupKey}\n` +
      `üìÖ Fecha: ${new Date().toLocaleString()}\n` +
      `üìä Incluye: ${Object.keys(propiedadesSemanales).length} propiedades\n` +
      `ü§ñ Triggers: ${backup.triggers.length} programaciones\n\n` +
      `‚ú® El backup est√° almacenado de forma segura y puede\n` +
      `restaurarse usando "üîÑ Restaurar Configuraci√≥n".`,
      ui.ButtonSet.OK
    );
    
    Logger.log(`‚úÖ [SEMANAL] Backup creado exitosamente: ${backupKey}`);
    
  } catch (error) {
    Logger.log(`‚ùå [SEMANAL] Error creando backup: ${error.message}`);
    ui.alert(
      'Error de Backup',
      `‚ùå No se pudo crear el backup de configuraci√≥n.\n\n${error.message}`,
      ui.ButtonSet.OK
    );
  }
}

/**
 * ‚úÖ Restaura configuraci√≥n desde un backup
 */
function restaurarConfiguracionSemanal() {
  const ui = SpreadsheetApp.getUi();
  
  try {
    Logger.log('üîÑ [SEMANAL] Iniciando restauraci√≥n de configuraci√≥n...');
    
    // ‚úÖ Obtener lista de backups disponibles
    const propiedades = PropertiesService.getScriptProperties();
    const todasLasPropiedades = propiedades.getProperties();
    const backupsDisponibles = [];
    
    Object.keys(todasLasPropiedades).forEach(clave => {
      if (clave.startsWith('BACKUP_SEMANAL_')) {
        try {
          const backup = JSON.parse(todasLasPropiedades[clave]);
          backupsDisponibles.push({
            clave: clave,
            fecha: new Date(backup.timestamp).toLocaleString(),
            version: backup.version || 'Desconocida'
          });
        } catch (e) {
          Logger.log(`‚ö†Ô∏è [SEMANAL] Backup corrupto encontrado: ${clave}`);
        }
      }
    });
    
    if (backupsDisponibles.length === 0) {
      ui.alert(
        'Sin Backups Disponibles',
        'üì≠ No se encontraron backups de configuraci√≥n.\n\n' +
        'üí° Puedes crear un backup usando "üíæ Crear Backup de Configuraci√≥n".',
        ui.ButtonSet.OK
      );
      return;
    }
    
    // ‚úÖ Mostrar lista de backups disponibles
    let mensaje = 'üîÑ BACKUPS DISPONIBLES:\n\n';
    backupsDisponibles.forEach((backup, index) => {
      mensaje += `${index + 1}. Fecha: ${backup.fecha}\n`;
      mensaje += `   Versi√≥n: ${backup.version}\n`;
      mensaje += `   Clave: ${backup.clave.substring(0, 30)}...\n\n`;
    });
    
    mensaje += '‚ö†Ô∏è ADVERTENCIA: La restauraci√≥n sobrescribir√°\n';
    mensaje += 'la configuraci√≥n actual. ¬øContinuar?';
    
    const confirmacion = ui.alert('Restaurar Configuraci√≥n', mensaje, ui.ButtonSet.YES_NO);
    
    if (confirmacion === ui.Button.YES) {
      // Por simplicidad, restaurar el backup m√°s reciente
      const backupMasReciente = backupsDisponibles.sort((a, b) => 
        new Date(b.fecha).getTime() - new Date(a.fecha).getTime()
      )[0];
      
      const backupData = JSON.parse(propiedades.getProperty(backupMasReciente.clave));
      
      // ‚úÖ Restaurar propiedades
      Object.keys(backupData.properties).forEach(clave => {
        propiedades.setProperty(clave, backupData.properties[clave]);
      });
      
      ui.alert(
        'Configuraci√≥n Restaurada',
        `‚úÖ Configuraci√≥n restaurada exitosamente!\n\n` +
        `üìÖ Backup utilizado: ${backupMasReciente.fecha}\n` +
        `üìä Propiedades restauradas: ${Object.keys(backupData.properties).length}\n\n` +
        `üîÑ Reinicia el sistema para aplicar todos los cambios.`,
        ui.ButtonSet.OK
      );
      
      Logger.log(`‚úÖ [SEMANAL] Configuraci√≥n restaurada desde: ${backupMasReciente.clave}`);
    }
    
  } catch (error) {
    Logger.log(`‚ùå [SEMANAL] Error restaurando configuraci√≥n: ${error.message}`);
    ui.alert(
      'Error de Restauraci√≥n',
      `‚ùå No se pudo restaurar la configuraci√≥n.\n\n${error.message}`,
      ui.ButtonSet.OK
    );
  }
}

/**
 * ‚úÖ Reset completo del sistema semanal
 */
function resetCompletoSistemaSemanal() {
  const ui = SpreadsheetApp.getUi();
  
  const confirmacion = ui.alert(
    'RESET COMPLETO DEL SISTEMA',
    'üö® ¬°ADVERTENCIA! Esta acci√≥n es IRREVERSIBLE.\n\n' +
    'Se eliminar√° TODA la configuraci√≥n del sistema semanal:\n' +
    '‚Ä¢ Credenciales de Jira\n' +
    '‚Ä¢ Cach√© completo\n' +
    '‚Ä¢ Errores registrados\n' +
    '‚Ä¢ Reportes autom√°ticos programados\n' +
    '‚Ä¢ Backups almacenados\n\n' +
    '‚ö†Ô∏è Solo usa esta opci√≥n si el sistema est√° completamente\n' +
    'da√±ado y necesitas empezar desde cero.\n\n' +
    '¬øEst√°s ABSOLUTAMENTE seguro?',
    ui.ButtonSet.YES_NO
  );
  
  if (confirmacion === ui.Button.YES) {
    const confirmacionFinal = ui.alert(
      'CONFIRMACI√ìN FINAL',
      'üö® √öLTIMA OPORTUNIDAD\n\n' +
      'Esta acci√≥n eliminar√° TODO y no se puede deshacer.\n' +
      'Tendr√°s que reconfigurar el sistema completamente.\n\n' +
      '¬øProceder con el reset completo?',
      ui.ButtonSet.YES_NO
    );
    
    if (confirmacionFinal === ui.Button.YES) {
      try {
        Logger.log('üö® [SEMANAL] Iniciando reset completo del sistema...');
        
        const propiedades = PropertiesService.getScriptProperties();
        const todasLasPropiedades = propiedades.getProperties();
        let eliminadas = 0;
        
        // ‚úÖ Eliminar todas las propiedades del sistema semanal
        Object.keys(todasLasPropiedades).forEach(clave => {
          if (clave.includes('SEMANAL') || 
              clave.startsWith('JIRA_') || 
              clave.startsWith('BACKUP_SEMANAL_') ||
              clave.startsWith('ERRORES_CRITICOS_SEMANAL')) {
            propiedades.deleteProperty(clave);
            eliminadas++;
          }
        });
        
        // ‚úÖ Eliminar todos los triggers autom√°ticos
        const triggers = ScriptApp.getProjectTriggers();
        let triggersEliminados = 0;
        triggers.forEach(trigger => {
          if (trigger.getHandlerFunction() === 'ejecutarReporteAutomaticoSemanal') {
            ScriptApp.deleteTrigger(trigger);
            triggersEliminados++;
          }
        });
        
        ui.alert(
          'Reset Completo Realizado',
          `üö® RESET COMPLETO FINALIZADO\n\n` +
          `üìä Resumen de eliminaciones:\n` +
          `‚Ä¢ Propiedades eliminadas: ${eliminadas}\n` +
          `‚Ä¢ Triggers eliminados: ${triggersEliminados}\n\n` +
          `‚ú® El sistema ha sido completamente resetado.\n` +
          `üîÑ Para usar el sistema nuevamente:\n` +
          `1. Ve a "üîê Configurar Credenciales"\n` +
          `2. Introduce tus datos de Jira\n` +
          `3. Ejecuta "üß™ Probar Conexi√≥n"\n` +
          `4. Genera tu primer reporte\n\n` +
          `üìû El sistema est√° listo para una configuraci√≥n fresca.`,
          ui.ButtonSet.OK
        );
        
        Logger.log(`‚úÖ [SEMANAL] Reset completo finalizado: ${eliminadas} propiedades y ${triggersEliminados} triggers eliminados`);
        
      } catch (error) {
        Logger.log(`‚ùå [SEMANAL] Error durante reset completo: ${error.message}`);
        ui.alert(
          'Error de Reset',
          `‚ùå Ocurri√≥ un error durante el reset completo.\n\n` +
          `Error: ${error.message}\n\n` +
          `üí° Es posible que el reset haya sido parcial.\n` +
          `Intenta ejecutar las funciones de limpieza individuales.`,
          ui.ButtonSet.OK
        );
      }
    }
  }
}

/**
 * ‚úÖ Funci√≥n de utilidad para mostrar estad√≠sticas detalladas de cach√©
 */
function mostrarEstadisticasCacheSemanalDetalladas() {
  const ui = SpreadsheetApp.getUi();
  
  try {
    const stats = CacheManagerSemanal.obtenerEstadisticas();
    
    if (!stats) {
      ui.alert(
        'Error de Estad√≠sticas',
        '‚ùå No se pudieron obtener las estad√≠sticas de cach√©.',
        ui.ButtonSet.OK
      );
      return;
    }
    
    let mensaje = `üìä ESTAD√çSTICAS DETALLADAS DE CACH√â\n\n`;
    mensaje += `üè∑Ô∏è Sistema: ${stats.tipoSistema}\n`;
    mensaje += `üì¶ Total de entradas: ${stats.totalEntradas}\n`;
    mensaje += `‚úÖ Entradas v√°lidas: ${stats.entradasValidas}\n`;
    mensaje += `‚è∞ Entradas expiradas: ${stats.entradasExpiradas}\n`;
    mensaje += `üíæ Tama√±o aproximado: ${Math.round(stats.tama√±oAproximado / 1024)} KB\n\n`;
    
    if (Object.keys(stats.porTipo).length > 0) {
      mensaje += 'üìã DESGLOSE POR TIPO:\n';
      Object.keys(stats.porTipo).forEach(tipo => {
        const tipoStats = stats.porTipo[tipo];
        mensaje += `‚Ä¢ ${tipo}: ${tipoStats.validas} v√°lidas, ${tipoStats.expiradas} expiradas\n`;
      });
      mensaje += '\n';
    }
    
    const eficiencia = stats.totalEntradas > 0 ? 
      Math.round((stats.entradasValidas / stats.totalEntradas) * 100) : 0;
    
    mensaje += `üìà EFICIENCIA DEL CACH√â: ${eficiencia}%\n\n`;
    
    mensaje += 'üí° RECOMENDACIONES:\n';
    if (stats.entradasExpiradas > stats.entradasValidas) {
      mensaje += '‚Ä¢ Considera limpiar el cach√© expirado\n';
    }
    if (stats.tama√±oAproximado > 100000) { // >100KB
      mensaje += '‚Ä¢ El cach√© est√° creciendo mucho, considera limpieza\n';
    }
    if (eficiencia < 50) {
      mensaje += '‚Ä¢ Baja eficiencia, limpia entradas expiradas\n';
    }
    if (eficiencia >= 80) {
      mensaje += '‚Ä¢ ¬°Excelente! El cach√© est√° funcionando √≥ptimamente\n';
    }
    
    ui.alert('Estad√≠sticas Detalladas de Cach√©', mensaje, ui.ButtonSet.OK);
    
  } catch (error) {
    Logger.log(`‚ùå [SEMANAL] Error mostrando estad√≠sticas detalladas: ${error.message}`);
    ui.alert(
      'Error',
      `‚ùå No se pudieron mostrar las estad√≠sticas detalladas.\n\n${error.message}`,
      ui.ButtonSet.OK
    );
  }
}